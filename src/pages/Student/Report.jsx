import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../../context/AuthContext";
import {
  getReportList,
  submitReport,
  updateReport,
  deleteReport,
  restoreReport,
  getDeletedReports,
  getMyTopic,
  submitReportsToAdmin,
} from "../../services/reportService";
import Sidebar from "../../components/Sidebar/Sidebar";
import "../../assets/css/Student/report.css";
import { toast } from "react-toastify";

const StudentReport = () => {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [reports, setReports] = useState([]);
  const [deletedReports, setDeletedReports] = useState([]);
  const [approvedReports, setApprovedReports] = useState([]);
  const [newReport, setNewReport] = useState({
    period: "",
    reportContent: "",
    reportFile: null,
  });
  const [topicId, setTopicId] = useState(null);
  const [topicName, setTopicName] = useState("");
  const [topicStatus, setTopicStatus] = useState("");
  const [teamMembers, setTeamMembers] = useState([]);
  const [editingReportId, setEditingReportId] = useState(null);
  const [loading, setLoading] = useState(true);
  const [showDeleted, setShowDeleted] = useState(false);

  useEffect(() => {
    if (!user) {
      navigate("/login");
      return;
    }

    const fetchData = async () => {
      try {
        const [reportData, deletedReportData, topicData] = await Promise.all([
          getReportList(user.token),
          getDeletedReports(user.token),
          getMyTopic(user.token),
        ]);
        setReports(reportData.filter((report) => report.status !== "approved"));
        setApprovedReports(reportData.filter((report) => report.status === "approved"));
        setDeletedReports(deletedReportData);
        setTopicId(topicData.topicId);
        setTopicName(topicData.topicName || "ƒê·ªÅ t√†i c·ªßa nh√≥m");
        setTopicStatus(topicData.status || "");
        setTeamMembers(topicData.teamMembers || []);
      } catch (err) {
        toast.error("L·ªói khi t·∫£i d·ªØ li·ªáu: " + err.message);
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [user, navigate]);

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    const allowedTypes = [
      "application/msword",
      "application/x-msword",
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
      "image/jpeg",
      "image/png",
      "image/gif",
    ];

    if (file && !allowedTypes.includes(file.type)) {
      toast.warning("Ch·ªâ ch·∫•p nh·∫≠n file DOC, DOCX, JPG, PNG.");
      setNewReport({ ...newReport, reportFile: null });
    } else {
      setNewReport({ ...newReport, reportFile: file });
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!topicId) {
      toast.warning("Kh√¥ng t√¨m th·∫•y ƒë·ªÅ t√†i ƒë∆∞·ª£c ph√™ duy·ªát. Vui l√≤ng th·ª≠ l·∫°i.");
      return;
    }
    if (!newReport.period) {
      toast.warning("Vui l√≤ng nh·∫≠p ƒë·ª£t n·ªôp.");
      return;
    }
    if (!newReport.reportContent) {
      toast.warning("Vui l√≤ng nh·∫≠p n·ªôi dung b√°o c√°o.");
      return;
    }
    if (!newReport.reportFile && !editingReportId) {
      toast.warning("Vui l√≤ng ch·ªçn file b√°o c√°o.");
      return;
    }

    try {
      if (editingReportId) {
        const formData = new FormData();
        if (newReport.reportFile) {
          formData.append("file", newReport.reportFile);
        }
        await updateReport(user.token, formData, editingReportId, newReport.reportContent);
        toast.success("‚úÖ C·∫≠p nh·∫≠t b√°o c√°o th√†nh c√¥ng.");
      } else {
        const formData = new FormData();
        formData.append("file", newReport.reportFile);
        await submitReport(
          user.token,
          formData,
          topicId,
          newReport.reportContent,
          newReport.period
        );
        toast.success("‚úÖ G·ª≠i b√°o c√°o th√†nh c√¥ng.");
      }

      setNewReport({ period: "", reportContent: "", reportFile: null });
      setEditingReportId(null);
      const reportData = await getReportList(user.token);
      setReports(reportData.filter((report) => report.status !== "approved"));
      setApprovedReports(reportData.filter((report) => report.status === "approved"));
      const deletedReportData = await getDeletedReports(user.token);
      setDeletedReports(deletedReportData);
    } catch (err) {
      toast.error(`L·ªói: ${err.message}`);
      console.error(err);
    }
  };

  const handleEdit = (report) => {
    if (report.status !== "pending") {
      toast.warning("Ch·ªâ c√≥ th·ªÉ ch·ªânh s·ª≠a b√°o c√°o ƒëang ch·ªù duy·ªát!");
      return;
    }
    setNewReport({
      period: report.period,
      reportContent: report.reportContent,
      reportFile: null,
    });
    setEditingReportId(report._id);
  };

  const handleCancelEdit = () => {
    setNewReport({ period: "", reportContent: "", reportFile: null });
    setEditingReportId(null);
  };

  const handleDelete = async (reportId) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a b√°o c√°o n√†y?")) {
      try {
        await deleteReport(user.token, reportId);
        toast.success("üóëÔ∏è ƒê√£ x√≥a b√°o c√°o.");
        const reportData = await getReportList(user.token);
        setReports(reportData.filter((report) => report.status !== "approved"));
        setApprovedReports(reportData.filter((report) => report.status === "approved"));
        const deletedReportData = await getDeletedReports(user.token);
        setDeletedReports(deletedReportData);
      } catch (err) {
        toast.error(`L·ªói: ${err.message}`);
        console.error(err);
      }
    }
  };

  const handleRestore = async (reportId) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën kh√¥i ph·ª•c b√°o c√°o n√†y?")) {
      try {
        await restoreReport(user.token, reportId);
        toast.success("üîÑ ƒê√£ kh√¥i ph·ª•c b√°o c√°o.");
        const reportData = await getReportList(user.token);
        setReports(reportData.filter((report) => report.status !== "approved"));
        setApprovedReports(reportData.filter((report) => report.status === "approved"));
        const deletedReportData = await getDeletedReports(user.token);
        setDeletedReports(deletedReportData);
      } catch (err) {
        toast.error(`L·ªói: ${err.message}`);
        console.error(err);
      }
    }
  };

  const handleSubmitToAdmin = async () => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën n·ªôp c√°c b√°o c√°o ƒë√£ ph√™ duy·ªát cho admin?")) return;
    try {
      await submitReportsToAdmin(user.token, topicId);
      toast.success("üì§ ƒê√£ n·ªôp b√°o c√°o cho admin th√†nh c√¥ng!");
      const reportData = await getReportList(user.token);
      setReports(reportData.filter((report) => report.status !== "approved"));
      setApprovedReports(reportData.filter((report) => report.status === "approved"));
    } catch (err) {
      toast.error(`L·ªói: ${err.message}`);
      console.error(err);
    }
  };

  const renderFilePreview = (fileUrl) => {
    if (!fileUrl) return "Kh√¥ng c√≥";

    const extension = fileUrl.split(".").pop().toLowerCase();
    if (["jpg", "jpeg", "png", "gif"].includes(extension)) {
      return <img src={fileUrl} alt="Preview" style={{ maxWidth: "100px", maxHeight: "100px" }} />;
    } else if (extension === "pdf") {
      return (
        <embed
          src={fileUrl}
          type="application/pdf"
          width="100px"
          height="100px"
          style={{ border: "1px solid #ddd" }}
        />
      );
    } else {
      return (
        <a href={fileUrl} target="_blank" rel="noreferrer" download>
          T·∫£i file
        </a>
      );
    }
  };

  const getStatusDisplay = (status) => {
    switch (status) {
      case "pending":
        return "‚è≥ ƒêang ch·ªù duy·ªát";
      case "approved":
        return "‚úÖ ƒê√£ ph√™ duy·ªát";
      case "rejected":
        return "‚ùå ƒê√£ t·ª´ ch·ªëi";
      default:
        return "Kh√¥ng x√°c ƒë·ªãnh";
    }
  };

  const isTeamLeader = user && teamMembers.length > 0 && teamMembers[0] === user.userId;
  const canSubmitToAdmin = approvedReports.length > 0 && !approvedReports.every((report) => report.submittedToAdmin);

  return (
    <div className="dashboard-container">
      <Sidebar role="student" />
      <div className="dashboard-content">
        <h2>üìë B√°o C√°o ƒê·ªÅ T√†i: {topicName}</h2>

        <div className="report-form">
          <input
            type="text"
            placeholder="Nh·∫≠p ƒë·ª£t n·ªôp (v√≠ d·ª•: ƒê·ª£t 1)"
            value={newReport.period}
            onChange={(e) => setNewReport({ ...newReport, period: e.target.value })}
            disabled={editingReportId}
          />
          <textarea
            placeholder="Nh·∫≠p n·ªôi dung b√°o c√°o..."
            value={newReport.reportContent}
            onChange={(e) => setNewReport({ ...newReport, reportContent: e.target.value })}
          />
          <input
            type="file"
            onChange={handleFileChange}
            accept=".doc,.docx,.jpg,.png,.gif"
          />
          <div>
            <button onClick={handleSubmit}>
              {editingReportId ? "‚úèÔ∏è C·∫≠p nh·∫≠t b√°o c√°o" : "üì§ G·ª≠i b√°o c√°o"}
            </button>
            {editingReportId && (
              <button onClick={handleCancelEdit} style={{ marginLeft: "10px" }}>
                ‚ùå H·ªßy
              </button>
            )}
          </div>
        </div>

        <button
          className={`ShowDeleted ${showDeleted ? "active" : ""}`}
          onClick={() => setShowDeleted(!showDeleted)}
        >
          {showDeleted ? "·∫®n b√°o c√°o ƒë√£ x√≥a" : "Xem b√°o c√°o ƒë√£ x√≥a"}
        </button>

        {loading ? (
          <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
        ) : (
          <>
            <h3>{showDeleted ? "B√°o c√°o ƒë√£ x√≥a" : "Danh s√°ch b√°o c√°o"}</h3>
            {showDeleted ? (
              deletedReports.length === 0 ? (
                <p>Ch∆∞a c√≥ b√°o c√°o n√†o b·ªã x√≥a.</p>
              ) : (
                <table>
                  <thead>
                    <tr>
                      <th>N·ªôi dung</th>
                      <th>T·ªáp ƒë√≠nh k√®m</th>
                      <th>ƒê·ª£t</th>
                      <th>H√†nh ƒë·ªông</th>
                    </tr>
                  </thead>
                  <tbody>
                    {deletedReports.map((report) => (
                      <tr key={report._id}>
                        <td>{report.reportContent}</td>
                        <td>{renderFilePreview(report.file)}</td>
                        <td>{report.period}</td>
                        <td>
                          <button onClick={() => handleRestore(report._id)}>üîÑ Kh√¥i ph·ª•c</button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              )
            ) : reports.length === 0 && approvedReports.length === 0 ? (
              <p>Ch∆∞a c√≥ b√°o c√°o n√†o ƒë∆∞·ª£c g·ª≠i.</p>
            ) : (
              <>
                {reports.length > 0 && (
                  <table>
                    <thead>
                      <tr>
                        <th>N·ªôi dung</th>
                        <th>T·ªáp ƒë√≠nh k√®m</th>
                        <th>ƒê·ª£t</th>
                        <th>Tr·∫°ng th√°i</th>
                        <th>H√†nh ƒë·ªông</th>
                      </tr>
                    </thead>
                    <tbody>
                      {reports.map((report) => (
                        <tr key={report._id}>
                          <td>{report.reportContent}</td>
                          <td>{renderFilePreview(report.file)}</td>
                          <td>{report.period}</td>
                          <td>{getStatusDisplay(report.status)}</td>
                          <td>
                            {report.status === "pending" && (
                              <>
                                <button onClick={() => handleEdit(report)}>‚úèÔ∏è S·ª≠a</button>
                                <button onClick={() => handleDelete(report._id)}>üóëÔ∏è X√≥a</button>
                              </>
                            )}
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                )}

                <h3>B√°o c√°o ƒë√£ ph√™ duy·ªát</h3>
                {approvedReports.length === 0 ? (
                  <p>Ch∆∞a c√≥ b√°o c√°o n√†o ƒë∆∞·ª£c ph√™ duy·ªát.</p>
                ) : (
                  <>
                    <table>
                      <thead>
                        <tr>
                          <th>N·ªôi dung</th>
                          <th>T·ªáp ƒë√≠nh k√®m</th>
                          <th>ƒê·ª£t</th>
                          <th>Tr·∫°ng th√°i</th>
                          <th>N·ªôp cho admin</th>
                        </tr>
                      </thead>
                      <tbody>
                        {approvedReports.map((report) => (
                          <tr key={report._id}>
                            <td>{report.reportContent}</td>
                            <td>{renderFilePreview(report.file)}</td>
                            <td>{report.period}</td>
                            <td>{getStatusDisplay(report.status)}</td>
                            <td>{report.submittedToAdmin ? "ƒê√£ n·ªôp" : "Ch∆∞a n·ªôp"}</td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                    {isTeamLeader && topicStatus === "approved" && canSubmitToAdmin && (
                      <button
                        className="submit-to-admin-btn"
                        onClick={handleSubmitToAdmin}
                      >
                        üì§ N·ªôp b√°o c√°o cho Khoa
                      </button>
                    )}
                  </>
                )}
              </>
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default StudentReport;