//src/pages/Teacher/Dashboard.jsx

import React, { useEffect, useState } from "react";
import Sidebar from "../../components/Sidebar/Sidebar";
import { useAuth } from "../../context/AuthContext";
import { fetchTopics, fetchDiscussions, fetchDashboardOverview } from "../../services/topicService";
import { getNotifications, markAllNotificationsAsRead } from "../../services/notificationService";
import "../../assets/css/Teacher/dashboard.css";

const TeacherDashboard = () => {
  const { user } = useAuth();
  const [overview, setOverview] = useState({ topicCount: 0, studentCount: 0, unreadNotifications: 0 });
  const [topics, setTopics] = useState([]);
  const [discussions, setDiscussions] = useState([]);
  const [notifications, setNotifications] = useState([]);
  const [isLoading, setIsLoading] = useState(false);

  const loadData = async () => {
    setIsLoading(true);
    try {
      // L·∫•y d·ªØ li·ªáu t·ªïng quan
      const overviewData = await fetchDashboardOverview(user.token);
      setOverview(overviewData);

      // L·∫•y danh s√°ch ƒë·ªÅ t√†i
      const topicData = await fetchTopics(user.token);
      setTopics(topicData);

      // L·∫•y danh s√°ch th·∫£o lu·∫≠n g·∫ßn ƒë√¢y
      const discussionData = await fetchDiscussions(user.token, 1, 3);
      setDiscussions(discussionData.discussions);

      // L·∫•y danh s√°ch th√¥ng b√°o
      const notificationData = await getNotifications(user.token);
      // Gi·ªõi h·∫°n 5 th√¥ng b√°o g·∫ßn nh·∫•t (v√¨ API kh√¥ng h·ªó tr·ª£ ph√¢n trang)
      setNotifications(notificationData.slice(0, 5));
    } catch (error) {
      console.error("L·ªói khi t·∫£i d·ªØ li·ªáu:", error.message);
      alert(error.message); // TODO: Thay b·∫±ng react-toastify
    } finally {
      setIsLoading(false);
    }
  };

  const handleMarkAllAsRead = async () => {
    try {
      await markAllNotificationsAsRead(user.token);
      // C·∫≠p nh·∫≠t l·∫°i th√¥ng b√°o v√† t·ªïng quan
      const updatedNotifications = notifications.map((notif) => ({
        ...notif,
        isRead: true,
      }));
      setNotifications(updatedNotifications);
      setOverview((prev) => ({ ...prev, unreadNotifications: 0 }));
    } catch (error) {
      console.error("L·ªói khi ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc:", error.message);
      alert(error.message); // TODO: Thay b·∫±ng react-toastify
    }
  };

  const handleViewDiscussion = (discussionId) => {
    window.location.href = `/teacher/discussions?discussionId=${discussionId}`;
  };

  useEffect(() => {
    if (user?.token) {
      loadData();
    }
  }, [user]);

  return (
    <div id="teacher-dashboard" className="tea-dashboard-container">
      <Sidebar role="teacher" />
      <div className="tea-dashboard-content">
        <h2>üìä Dashboard Gi√°o vi√™n</h2>

        {/* T·ªïng quan */}
        <div className="tea-overview-section">
          <div className="tea-overview-card">
            <h4>ƒê·ªÅ t√†i ƒëang h∆∞·ªõng d·∫´n</h4>
            <p>{overview.topicCount}</p>
          </div>
          <div className="tea-overview-card">
            <h4>S·ªë sinh vi√™n</h4>
            <p>{overview.studentCount}</p>
          </div>
          <div className="tea-overview-card">
            <h4>Th√¥ng b√°o ch∆∞a ƒë·ªçc</h4>
            <p>{overview.unreadNotifications}</p>
          </div>
        </div>

        {/* Th√¥ng b√°o */}
        <div className="tea-notifications-section">
          <div className="tea-notifications-header">
            <h3>üîî Th√¥ng b√°o g·∫ßn ƒë√¢y</h3>
            {notifications.some((notif) => !notif.isRead) && (
              <button className="tea-mark-read-btn" onClick={handleMarkAllAsRead}>
                ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc
              </button>
            )}
          </div>
          {isLoading ? (
            <p>ƒêang t·∫£i...</p>
          ) : notifications.length === 0 ? (
            <p>Ch∆∞a c√≥ th√¥ng b√°o n√†o.</p>
          ) : (
            <div className="tea-notification-cards">
              {notifications.map((notification) => (
                <div
                  key={notification._id}
                  className={`tea-notification-card ${notification.isRead ? "read" : "unread"}`}
                >
                  <p>{notification.message}</p>
                  <small>{new Date(notification.createdAt).toLocaleString()}</small>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Th·∫£o lu·∫≠n nhanh */}
        <div className="tea-discussions-section">
          <h3>üí¨ Th·∫£o lu·∫≠n g·∫ßn ƒë√¢y</h3>
          {isLoading ? (
            <p>ƒêang t·∫£i...</p>
          ) : discussions.length === 0 ? (
            <p>Ch∆∞a c√≥ th·∫£o lu·∫≠n n√†o.</p>
          ) : (
            <div className="tea-discussion-cards">
              {discussions.map((discussion) => (
                <div
                  key={discussion.discussionId}
                  className="tea-discussion-card"
                >
                  <h4>{discussion.topicTitle || "Kh√¥ng c√≥ ti√™u ƒë·ªÅ"}</h4>
                  <p>
                    {discussion.messages.length > 0
                      ? discussion.messages[discussion.messages.length - 1].message
                      : "Ch∆∞a c√≥ tin nh·∫Øn"}
                  </p>
                  <small>
                    {discussion.messages.length > 0
                      ? new Date(
                          discussion.messages[discussion.messages.length - 1].createdAt
                        ).toLocaleString()
                      : ""}
                  </small>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default TeacherDashboard;